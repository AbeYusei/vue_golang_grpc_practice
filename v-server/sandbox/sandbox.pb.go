// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sandbox.proto

package sandbox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetLibraryNameParam struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLibraryNameParam) Reset()         { *m = GetLibraryNameParam{} }
func (m *GetLibraryNameParam) String() string { return proto.CompactTextString(m) }
func (*GetLibraryNameParam) ProtoMessage()    {}
func (*GetLibraryNameParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fddaeda1f9b863c, []int{0}
}

func (m *GetLibraryNameParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLibraryNameParam.Unmarshal(m, b)
}
func (m *GetLibraryNameParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLibraryNameParam.Marshal(b, m, deterministic)
}
func (m *GetLibraryNameParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLibraryNameParam.Merge(m, src)
}
func (m *GetLibraryNameParam) XXX_Size() int {
	return xxx_messageInfo_GetLibraryNameParam.Size(m)
}
func (m *GetLibraryNameParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLibraryNameParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetLibraryNameParam proto.InternalMessageInfo

type LibraryName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LibraryName) Reset()         { *m = LibraryName{} }
func (m *LibraryName) String() string { return proto.CompactTextString(m) }
func (*LibraryName) ProtoMessage()    {}
func (*LibraryName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fddaeda1f9b863c, []int{1}
}

func (m *LibraryName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LibraryName.Unmarshal(m, b)
}
func (m *LibraryName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LibraryName.Marshal(b, m, deterministic)
}
func (m *LibraryName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LibraryName.Merge(m, src)
}
func (m *LibraryName) XXX_Size() int {
	return xxx_messageInfo_LibraryName.Size(m)
}
func (m *LibraryName) XXX_DiscardUnknown() {
	xxx_messageInfo_LibraryName.DiscardUnknown(m)
}

var xxx_messageInfo_LibraryName proto.InternalMessageInfo

func (m *LibraryName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetLibraryNameParam)(nil), "sandbox.getLibraryNameParam")
	proto.RegisterType((*LibraryName)(nil), "sandbox.libraryName")
}

func init() { proto.RegisterFile("sandbox.proto", fileDescriptor_6fddaeda1f9b863c) }

var fileDescriptor_6fddaeda1f9b863c = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0xcc, 0x4b,
	0x49, 0xca, 0xaf, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x44, 0xb9,
	0x84, 0xd3, 0x53, 0x4b, 0x7c, 0x32, 0x93, 0x8a, 0x12, 0x8b, 0x2a, 0xfd, 0x12, 0x73, 0x53, 0x03,
	0x12, 0x8b, 0x12, 0x73, 0x95, 0x14, 0xb9, 0xb8, 0x73, 0x10, 0x62, 0x42, 0x42, 0x5c, 0x2c, 0x79,
	0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x51, 0x3c, 0x97, 0x28,
	0x4c, 0x67, 0x0e, 0x58, 0x55, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x1b, 0x17, 0x1f,
	0xaa, 0x84, 0x90, 0x8c, 0x1e, 0xcc, 0x76, 0x2c, 0x76, 0x49, 0x89, 0xc0, 0x65, 0x91, 0xac, 0x54,
	0x62, 0x48, 0x62, 0x03, 0x3b, 0xd5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x81, 0x03, 0xeb,
	0xbb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GetLibralyNameServiceClient is the client API for GetLibralyNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetLibralyNameServiceClient interface {
	GetLibralyName(ctx context.Context, in *GetLibraryNameParam, opts ...grpc.CallOption) (*LibraryName, error)
}

type getLibralyNameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetLibralyNameServiceClient(cc *grpc.ClientConn) GetLibralyNameServiceClient {
	return &getLibralyNameServiceClient{cc}
}

func (c *getLibralyNameServiceClient) GetLibralyName(ctx context.Context, in *GetLibraryNameParam, opts ...grpc.CallOption) (*LibraryName, error) {
	out := new(LibraryName)
	err := c.cc.Invoke(ctx, "/sandbox.getLibralyNameService/getLibralyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetLibralyNameServiceServer is the server API for GetLibralyNameService service.
type GetLibralyNameServiceServer interface {
	GetLibralyName(context.Context, *GetLibraryNameParam) (*LibraryName, error)
}

func RegisterGetLibralyNameServiceServer(s *grpc.Server, srv GetLibralyNameServiceServer) {
	s.RegisterService(&_GetLibralyNameService_serviceDesc, srv)
}

func _GetLibralyNameService_GetLibralyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibraryNameParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetLibralyNameServiceServer).GetLibralyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sandbox.getLibralyNameService/GetLibralyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetLibralyNameServiceServer).GetLibralyName(ctx, req.(*GetLibraryNameParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetLibralyNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sandbox.getLibralyNameService",
	HandlerType: (*GetLibralyNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getLibralyName",
			Handler:    _GetLibralyNameService_GetLibralyName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sandbox.proto",
}
